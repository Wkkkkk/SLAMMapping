// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd.task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION

#include "cmd.task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cmd {

    namespace {

        const ::google::protobuf::Descriptor *task_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection *
                task_reflection_ = NULL;
        const ::google::protobuf::Descriptor *task_job_descriptor_ = NULL;
        const ::google::protobuf::internal::GeneratedMessageReflection *
                task_job_reflection_ = NULL;
        const ::google::protobuf::EnumDescriptor *task_JobType_descriptor_ = NULL;

    }  // namespace


    void protobuf_AssignDesc_cmd_2etask_2eproto() {
        protobuf_AddDesc_cmd_2etask_2eproto();
        const ::google::protobuf::FileDescriptor *file =
                ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                        "cmd.task.proto");
        GOOGLE_CHECK(file != NULL);
        task_descriptor_ = file->message_type(0);
        static const int task_offsets_[5] = {
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, ip_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, port_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, pid_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, id_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, jobs_),
        };
        task_reflection_ =
                new ::google::protobuf::internal::GeneratedMessageReflection(
                        task_descriptor_,
                        task::default_instance_,
                        task_offsets_,
                        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _has_bits_[0]),
                        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task, _unknown_fields_),
                        -1,
                        ::google::protobuf::DescriptorPool::generated_pool(),
                        ::google::protobuf::MessageFactory::generated_factory(),
                        sizeof(task));
        task_job_descriptor_ = task_descriptor_->nested_type(0);
        static const int task_job_offsets_[3] = {
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_job, file_path_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_job, type_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_job, description_),
        };
        task_job_reflection_ =
                new ::google::protobuf::internal::GeneratedMessageReflection(
                        task_job_descriptor_,
                        task_job::default_instance_,
                        task_job_offsets_,
                        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_job, _has_bits_[0]),
                        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_job, _unknown_fields_),
                        -1,
                        ::google::protobuf::DescriptorPool::generated_pool(),
                        ::google::protobuf::MessageFactory::generated_factory(),
                        sizeof(task_job));
        task_JobType_descriptor_ = task_descriptor_->enum_type(0);
    }

    namespace {

        GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);

        inline void protobuf_AssignDescriptorsOnce() {
            ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                               &protobuf_AssignDesc_cmd_2etask_2eproto);
        }

        void protobuf_RegisterTypes(const ::std::string &) {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                    task_descriptor_, &task::default_instance());
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                    task_job_descriptor_, &task_job::default_instance());
        }

    }  // namespace

    void protobuf_ShutdownFile_cmd_2etask_2eproto() {
        delete task::default_instance_;
        delete task_reflection_;
        delete task_job::default_instance_;
        delete task_job_reflection_;
    }

    void protobuf_AddDesc_cmd_2etask_2eproto() {
        static bool already_here = false;
        if (already_here) return;
        already_here = true;
        GOOGLE_PROTOBUF_VERIFY_VERSION;

        ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
                "\n\016cmd.task.proto\022\003cmd\"\334\001\n\004task\022\n\n\002ip\030\001 \002"
                "(\t\022\014\n\004port\030\002 \002(\005\022\013\n\003pid\030\003 \002(\005\022\n\n\002id\030\004 \002("
                "\005\022\033\n\004jobs\030\005 \003(\0132\r.cmd.task.job\032N\n\003job\022\021\n"
                "\tfile_path\030\001 \002(\t\022\037\n\004type\030\002 \002(\0162\021.cmd.tas"
                "k.JobType\022\023\n\013description\030\003 \001(\t\"4\n\007JobTyp"
                "e\022\r\n\tCALCULATE\020\000\022\021\n\rFILE_TRANSFER\020\001\022\007\n\003E"
                "ND\020\002", 244);
        ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
                "cmd.task.proto", &protobuf_RegisterTypes);
        task::default_instance_ = new task();
        task_job::default_instance_ = new task_job();
        task::default_instance_->InitAsDefaultInstance();
        task_job::default_instance_->InitAsDefaultInstance();
        ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cmd_2etask_2eproto);
    }

// Force AddDescriptors() to be called at static initialization time.
    struct StaticDescriptorInitializer_cmd_2etask_2eproto {
        StaticDescriptorInitializer_cmd_2etask_2eproto() {
            protobuf_AddDesc_cmd_2etask_2eproto();
        }
    } static_descriptor_initializer_cmd_2etask_2eproto_;

// ===================================================================

    const ::google::protobuf::EnumDescriptor *task_JobType_descriptor() {
        protobuf_AssignDescriptorsOnce();
        return task_JobType_descriptor_;
    }

    bool task_JobType_IsValid(int value) {
        switch (value) {
            case 0:
            case 1:
            case 2:
                return true;
            default:
                return false;
        }
    }

#ifndef _MSC_VER
    const task_JobType task::CALCULATE;
    const task_JobType task::FILE_TRANSFER;
    const task_JobType task::END;
    const task_JobType task::JobType_MIN;
    const task_JobType task::JobType_MAX;
    const int task::JobType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
    const int task_job::kFilePathFieldNumber;
    const int task_job::kTypeFieldNumber;
    const int task_job::kDescriptionFieldNumber;
#endif  // !_MSC_VER

    task_job::task_job()
            : ::google::protobuf::Message() {
        SharedCtor();
        // @@protoc_insertion_point(constructor:cmd.task.job)
    }

    void task_job::InitAsDefaultInstance() {
    }

    task_job::task_job(const task_job &from)
            : ::google::protobuf::Message() {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:cmd.task.job)
    }

    void task_job::SharedCtor() {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        file_path_ = const_cast< ::std::string *>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        type_ = 0;
        description_ = const_cast< ::std::string *>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    task_job::~task_job() {
        // @@protoc_insertion_point(destructor:cmd.task.job)
        SharedDtor();
    }

    void task_job::SharedDtor() {
        if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
            delete file_path_;
        }
        if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
            delete description_;
        }
        if (this != default_instance_) {
        }
    }

    void task_job::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }

    const ::google::protobuf::Descriptor *task_job::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return task_job_descriptor_;
    }

    const task_job &task_job::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_cmd_2etask_2eproto();
        return *default_instance_;
    }

    task_job *task_job::default_instance_ = NULL;

    task_job *task_job::New() const {
        return new task_job;
    }

    void task_job::Clear() {
        if (_has_bits_[0 / 32] & 7) {
            if (has_file_path()) {
                if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                    file_path_->clear();
                }
            }
            type_ = 0;
            if (has_description()) {
                if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                    description_->clear();
                }
            }
        }
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }

    bool task_job::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:cmd.task.job)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // required string file_path = 1;
                case 1: {
                    if (tag == 10) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_file_path()));
                        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->file_path().data(), this->file_path().length(),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "file_path");
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(16)) goto parse_type;
                    break;
                }

                    // required .cmd.task.JobType type = 2;
                case 2: {
                    if (tag == 16) {
                        parse_type:
                        int value;
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                                input, &value)));
                        if (::cmd::task_JobType_IsValid(value)) {
                            set_type(static_cast< ::cmd::task_JobType >(value));
                        } else {
                            mutable_unknown_fields()->AddVarint(2, value);
                        }
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(26)) goto parse_description;
                    break;
                }

                    // optional string description = 3;
                case 3: {
                    if (tag == 26) {
                        parse_description:
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_description()));
                        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->description().data(), this->description().length(),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "description");
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectAtEnd()) goto success;
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0 ||
                        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, mutable_unknown_fields()));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:cmd.task.job)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:cmd.task.job)
        return false;
#undef DO_
    }

    void task_job::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream *output) const {
        // @@protoc_insertion_point(serialize_start:cmd.task.job)
        // required string file_path = 1;
        if (has_file_path()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->file_path().data(), this->file_path().length(),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "file_path");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    1, this->file_path(), output);
        }

        // required .cmd.task.JobType type = 2;
        if (has_type()) {
            ::google::protobuf::internal::WireFormatLite::WriteEnum(
                    2, this->type(), output);
        }

        // optional string description = 3;
        if (has_description()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->description().data(), this->description().length(),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "description");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    3, this->description(), output);
        }

        if (!unknown_fields().empty()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:cmd.task.job)
    }

    ::google::protobuf::uint8 *task_job::SerializeWithCachedSizesToArray(
            ::google::protobuf::uint8 *target) const {
        // @@protoc_insertion_point(serialize_to_array_start:cmd.task.job)
        // required string file_path = 1;
        if (has_file_path()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->file_path().data(), this->file_path().length(),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "file_path");
            target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                            1, this->file_path(), target);
        }

        // required .cmd.task.JobType type = 2;
        if (has_type()) {
            target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
                    2, this->type(), target);
        }

        // optional string description = 3;
        if (has_description()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->description().data(), this->description().length(),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "description");
            target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                            3, this->description(), target);
        }

        if (!unknown_fields().empty()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:cmd.task.job)
        return target;
    }

    int task_job::ByteSize() const {
        int total_size = 0;

        if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            // required string file_path = 1;
            if (has_file_path()) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->file_path());
            }

            // required .cmd.task.JobType type = 2;
            if (has_type()) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
            }

            // optional string description = 3;
            if (has_description()) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->description());
            }

        }
        if (!unknown_fields().empty()) {
            total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                            unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void task_job::MergeFrom(const ::google::protobuf::Message &from) {
        GOOGLE_CHECK_NE(&from, this);
        const task_job *source =
                ::google::protobuf::internal::dynamic_cast_if_available<const task_job *>(
                        &from);
        if (source == NULL) {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            MergeFrom(*source);
        }
    }

    void task_job::MergeFrom(const task_job &from) {
        GOOGLE_CHECK_NE(&from, this);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_file_path()) {
                set_file_path(from.file_path());
            }
            if (from.has_type()) {
                set_type(from.type());
            }
            if (from.has_description()) {
                set_description(from.description());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }

    void task_job::CopyFrom(const ::google::protobuf::Message &from) {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void task_job::CopyFrom(const task_job &from) {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool task_job::IsInitialized() const {
        if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

        return true;
    }

    void task_job::Swap(task_job *other) {
        if (other != this) {
            std::swap(file_path_, other->file_path_);
            std::swap(type_, other->type_);
            std::swap(description_, other->description_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }

    ::google::protobuf::Metadata task_job::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = task_job_descriptor_;
        metadata.reflection = task_job_reflection_;
        return metadata;
    }


// -------------------------------------------------------------------

#ifndef _MSC_VER
    const int task::kIpFieldNumber;
    const int task::kPortFieldNumber;
    const int task::kPidFieldNumber;
    const int task::kIdFieldNumber;
    const int task::kJobsFieldNumber;
#endif  // !_MSC_VER

    task::task()
            : ::google::protobuf::Message() {
        SharedCtor();
        // @@protoc_insertion_point(constructor:cmd.task)
    }

    void task::InitAsDefaultInstance() {
    }

    task::task(const task &from)
            : ::google::protobuf::Message() {
        SharedCtor();
        MergeFrom(from);
        // @@protoc_insertion_point(copy_constructor:cmd.task)
    }

    void task::SharedCtor() {
        ::google::protobuf::internal::GetEmptyString();
        _cached_size_ = 0;
        ip_ = const_cast< ::std::string *>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        port_ = 0;
        pid_ = 0;
        id_ = 0;
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
    }

    task::~task() {
        // @@protoc_insertion_point(destructor:cmd.task)
        SharedDtor();
    }

    void task::SharedDtor() {
        if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
            delete ip_;
        }
        if (this != default_instance_) {
        }
    }

    void task::SetCachedSize(int size) const {
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
    }

    const ::google::protobuf::Descriptor *task::descriptor() {
        protobuf_AssignDescriptorsOnce();
        return task_descriptor_;
    }

    const task &task::default_instance() {
        if (default_instance_ == NULL) protobuf_AddDesc_cmd_2etask_2eproto();
        return *default_instance_;
    }

    task *task::default_instance_ = NULL;

    task *task::New() const {
        return new task;
    }

    void task::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<task*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

        if (_has_bits_[0 / 32] & 15) {
            ZR_(port_, pid_);
            if (has_ip()) {
                if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
                    ip_->clear();
                }
            }
            id_ = 0;
        }

#undef OFFSET_OF_FIELD_
#undef ZR_

        jobs_.Clear();
        ::memset(_has_bits_, 0, sizeof(_has_bits_));
        mutable_unknown_fields()->Clear();
    }

    bool task::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
        ::google::protobuf::uint32 tag;
        // @@protoc_insertion_point(parse_start:cmd.task)
        for (;;) {
            ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
            tag = p.first;
            if (!p.second) goto handle_unusual;
            switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                // required string ip = 1;
                case 1: {
                    if (tag == 10) {
                        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                input, this->mutable_ip()));
                        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                                this->ip().data(), this->ip().length(),
                                ::google::protobuf::internal::WireFormat::PARSE,
                                "ip");
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(16)) goto parse_port;
                    break;
                }

                    // required int32 port = 2;
                case 2: {
                    if (tag == 16) {
                        parse_port:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &port_)));
                        set_has_port();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(24)) goto parse_pid;
                    break;
                }

                    // required int32 pid = 3;
                case 3: {
                    if (tag == 24) {
                        parse_pid:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &pid_)));
                        set_has_pid();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(32)) goto parse_id;
                    break;
                }

                    // required int32 id = 4;
                case 4: {
                    if (tag == 32) {
                        parse_id:
                        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                input, &id_)));
                        set_has_id();
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(42)) goto parse_jobs;
                    break;
                }

                    // repeated .cmd.task.job jobs = 5;
                case 5: {
                    if (tag == 42) {
                        parse_jobs:
                        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                                input, add_jobs()));
                    } else {
                        goto handle_unusual;
                    }
                    if (input->ExpectTag(42)) goto parse_jobs;
                    if (input->ExpectAtEnd()) goto success;
                    break;
                }

                default: {
                    handle_unusual:
                    if (tag == 0 ||
                        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                        goto success;
                    }
                    DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, mutable_unknown_fields()));
                    break;
                }
            }
        }
        success:
        // @@protoc_insertion_point(parse_success:cmd.task)
        return true;
        failure:
        // @@protoc_insertion_point(parse_failure:cmd.task)
        return false;
#undef DO_
    }

    void task::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream *output) const {
        // @@protoc_insertion_point(serialize_start:cmd.task)
        // required string ip = 1;
        if (has_ip()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->ip().data(), this->ip().length(),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "ip");
            ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
                    1, this->ip(), output);
        }

        // required int32 port = 2;
        if (has_port()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
        }

        // required int32 pid = 3;
        if (has_pid()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
        }

        // required int32 id = 4;
        if (has_id()) {
            ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
        }

        // repeated .cmd.task.job jobs = 5;
        for (int i = 0; i < this->jobs_size(); i++) {
            ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                    5, this->jobs(i), output);
        }

        if (!unknown_fields().empty()) {
            ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                    unknown_fields(), output);
        }
        // @@protoc_insertion_point(serialize_end:cmd.task)
    }

    ::google::protobuf::uint8 *task::SerializeWithCachedSizesToArray(
            ::google::protobuf::uint8 *target) const {
        // @@protoc_insertion_point(serialize_to_array_start:cmd.task)
        // required string ip = 1;
        if (has_ip()) {
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
                    this->ip().data(), this->ip().length(),
                    ::google::protobuf::internal::WireFormat::SERIALIZE,
                    "ip");
            target =
                    ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                            1, this->ip(), target);
        }

        // required int32 port = 2;
        if (has_port()) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
        }

        // required int32 pid = 3;
        if (has_pid()) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
        }

        // required int32 id = 4;
        if (has_id()) {
            target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
        }

        // repeated .cmd.task.job jobs = 5;
        for (int i = 0; i < this->jobs_size(); i++) {
            target = ::google::protobuf::internal::WireFormatLite::
            WriteMessageNoVirtualToArray(
                    5, this->jobs(i), target);
        }

        if (!unknown_fields().empty()) {
            target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                    unknown_fields(), target);
        }
        // @@protoc_insertion_point(serialize_to_array_end:cmd.task)
        return target;
    }

    int task::ByteSize() const {
        int total_size = 0;

        if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            // required string ip = 1;
            if (has_ip()) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->ip());
            }

            // required int32 port = 2;
            if (has_port()) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      this->port());
            }

            // required int32 pid = 3;
            if (has_pid()) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      this->pid());
            }

            // required int32 id = 4;
            if (has_id()) {
                total_size += 1 +
                              ::google::protobuf::internal::WireFormatLite::Int32Size(
                                      this->id());
            }

        }
        // repeated .cmd.task.job jobs = 5;
        total_size += 1 * this->jobs_size();
        for (int i = 0; i < this->jobs_size(); i++) {
            total_size +=
                    ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                            this->jobs(i));
        }

        if (!unknown_fields().empty()) {
            total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                            unknown_fields());
        }
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _cached_size_ = total_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        return total_size;
    }

    void task::MergeFrom(const ::google::protobuf::Message &from) {
        GOOGLE_CHECK_NE(&from, this);
        const task *source =
                ::google::protobuf::internal::dynamic_cast_if_available<const task *>(
                        &from);
        if (source == NULL) {
            ::google::protobuf::internal::ReflectionOps::Merge(from, this);
        } else {
            MergeFrom(*source);
        }
    }

    void task::MergeFrom(const task &from) {
        GOOGLE_CHECK_NE(&from, this);
        jobs_.MergeFrom(from.jobs_);
        if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
            if (from.has_ip()) {
                set_ip(from.ip());
            }
            if (from.has_port()) {
                set_port(from.port());
            }
            if (from.has_pid()) {
                set_pid(from.pid());
            }
            if (from.has_id()) {
                set_id(from.id());
            }
        }
        mutable_unknown_fields()->MergeFrom(from.unknown_fields());
    }

    void task::CopyFrom(const ::google::protobuf::Message &from) {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    void task::CopyFrom(const task &from) {
        if (&from == this) return;
        Clear();
        MergeFrom(from);
    }

    bool task::IsInitialized() const {
        if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

        if (!::google::protobuf::internal::AllAreInitialized(this->jobs())) return false;
        return true;
    }

    void task::Swap(task *other) {
        if (other != this) {
            std::swap(ip_, other->ip_);
            std::swap(port_, other->port_);
            std::swap(pid_, other->pid_);
            std::swap(id_, other->id_);
            jobs_.Swap(&other->jobs_);
            std::swap(_has_bits_[0], other->_has_bits_[0]);
            _unknown_fields_.Swap(&other->_unknown_fields_);
            std::swap(_cached_size_, other->_cached_size_);
        }
    }

    ::google::protobuf::Metadata task::GetMetadata() const {
        protobuf_AssignDescriptorsOnce();
        ::google::protobuf::Metadata metadata;
        metadata.descriptor = task_descriptor_;
        metadata.reflection = task_reflection_;
        return metadata;
    }


// @@protoc_insertion_point(namespace_scope)

}  // namespace cmd

// @@protoc_insertion_point(global_scope)
